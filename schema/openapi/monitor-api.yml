openapi: 3.0.0
info:
  title: Monitor API
  version: 0.0.0
tags:
  - name: Auth
  - name: Me
  - name: Role
  - name: User
paths:
  /auth/google/callback:
    get:
      operationId: callbackFromGoogle
      description: Callback from Google
      parameters: []
      responses:
        '307':
          description: Redirection
        '406':
          description: Client error
      tags:
        - Auth
      security:
        - SkipAuth: []
  /auth/google/link/{loginKey}:
    post:
      operationId: linkWithGoogle
      description: First login with Google Account
      parameters:
        - name: loginKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLoginURL'
        '406':
          description: Client error
      tags:
        - Auth
      security:
        - SkipAuth: []
  /auth/google/login:
    post:
      operationId: loginWithGoogle
      description: Login with Google Account
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLoginURL'
        '406':
          description: Client error
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrentPage'
      security:
        - SkipAuth: []
  /auth/logout:
    post:
      operationId: logout
      description: Invalidate refresh_token and access_token
      parameters: []
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '401':
          description: Access is unauthorized.
      tags:
        - Auth
      security:
        - SkipAuth: []
  /auth/refresh:
    post:
      operationId: refreshAccessToken
      description: Refresh access token
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenWithMeAndPagePermissions'
        '401':
          description: Access is unauthorized.
      tags:
        - Auth
      security:
        - SkipAuth: []
  /me:
    get:
      operationId: getMe
      description: get own user info
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
      tags:
        - Me
  /roles:
    get:
      operationId: getRoles
      description: get all roles
      parameters:
        - name: sorted_by
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortableRoleDataType'
          explode: false
        - name: sort_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortType'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
      tags:
        - Role
  /users:
    post:
      operationId: getUsersByIds
      description: get users by ids
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UUID'
  /users/search:
    get:
      operationId: searchUsers
      description: get user ids
      parameters:
        - name: nickname
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: last_access_before
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: last_access_after
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: role_id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UUID'
          explode: false
        - name: sorted_by
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortableUserDataType'
          explode: false
        - name: sort_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortType'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UUID'
      tags:
        - User
security:
  - AccessTokenAuth: []
components:
  schemas:
    AccessTokenWithMeAndPagePermissions:
      type: object
      required:
        - access_token
        - me
        - page_permissions
      properties:
        access_token:
          type: string
          description: the access token
        me:
          allOf:
            - $ref: '#/components/schemas/Me'
          description: the currently logged-in user info
        page_permissions:
          allOf:
            - $ref: '#/components/schemas/PagePermissions'
          description: the page permissions
    CurrentPage:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: the url of the page currently being viewed
    GoogleLoginURL:
      type: object
      required:
        - redirect_url
      properties:
        redirect_url:
          type: string
          format: url
          description: the Google's login page URL
    Me:
      type: object
      required:
        - uuid
        - nickname
        - role_uuid
        - role_name
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        nickname:
          type: string
        role_uuid:
          $ref: '#/components/schemas/UUID'
        role_name:
          type: string
    PagePermissions:
      type: object
      required:
        - users
      properties:
        users:
          type: boolean
    Role:
      type: object
      required:
        - id
        - name
        - priority
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
        priority:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SortType:
      type: string
      enum:
        - ASC
        - DESC
    SortableRoleDataType:
      type: string
      enum:
        - Name
        - Priority
        - CreatedAt
        - UpdatedAt
    SortableUserDataType:
      type: string
      enum:
        - NickName
        - LastAccess
        - CreatedAt
        - UpdatedAt
        - RoleName
        - RolePriority
    UUID:
      type: string
      format: uuid
      description: the UUID
      x-go-type-import:
        name: uuid
        path: github.com/gofrs/uuid/v5
      x-go-type: uuid.UUID
    User:
      type: object
      required:
        - id
        - nickname
        - last_access
        - created_at
        - updated_at
        - role
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        nickname:
          type: string
        last_access:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        role:
          $ref: '#/components/schemas/Role'
  securitySchemes:
    AccessTokenAuth:
      type: http
      scheme: bearer
      description: Authorize by access tokens
    SkipAuth:
      type: http
      scheme: none
      description: No authentication needed
