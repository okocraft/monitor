// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package registry

import (
	"github.com/okocraft/monitor/internal/config"
	"github.com/okocraft/monitor/internal/handler"
	auditlog3 "github.com/okocraft/monitor/internal/handler/auditlog"
	auth3 "github.com/okocraft/monitor/internal/handler/oapi/auth"
	"github.com/okocraft/monitor/internal/handler/oapi/me"
	user3 "github.com/okocraft/monitor/internal/handler/oapi/user"
	"github.com/okocraft/monitor/internal/repositories/auditlog"
	"github.com/okocraft/monitor/internal/repositories/auth"
	"github.com/okocraft/monitor/internal/repositories/database"
	"github.com/okocraft/monitor/internal/repositories/permission"
	"github.com/okocraft/monitor/internal/repositories/user"
	auditlog2 "github.com/okocraft/monitor/internal/usecases/auditlog"
	auth2 "github.com/okocraft/monitor/internal/usecases/auth"
	"github.com/okocraft/monitor/internal/usecases/cleanup"
	permission2 "github.com/okocraft/monitor/internal/usecases/permission"
	user2 "github.com/okocraft/monitor/internal/usecases/user"
)

// Injectors from wire.go:

func NewHTTPHandler(cfg config.HTTPServerConfig, db database.DB) (handler.HTTPHandler, error) {
	authConfig := getAuthConfigFromHTTPConfig(cfg)
	authRepository := auth.NewAuthRepository(db)
	authUsecase := auth2.NewAuthUsecase(authConfig, authRepository)
	userRepository := user.NewUserRepository(db)
	transaction := database.NewTransaction(db)
	userUsecase := user2.NewUserUsecase(userRepository, transaction)
	permissionRepository := permission.NewPermissionRepository(db)
	permissionUsecase := permission2.NewPermissionUsecase(permissionRepository)
	authHandler := auth3.NewAuthHandler(authUsecase, userUsecase, permissionUsecase)
	googleAuthConfig := getGoogleAuthConfigFromHTTPConfig(cfg)
	googleAuthHandler := auth3.NewGoogleAuthHandler(googleAuthConfig, authUsecase, userUsecase)
	meHandler := me.NewMeHandler(userUsecase)
	userHandler := user3.NewUserHandler(userUsecase, permissionUsecase)
	auditLogRepository := auditlog.NewAuditLogRepository(db)
	auditLogUsecase := auditlog2.NewAuditLogUsecase(auditLogRepository)
	auditLogMiddleware := auditlog3.NewAuditLogMiddleware(auditLogUsecase, userUsecase)
	httpHandler := handler.NewHTTPHandler(authHandler, googleAuthHandler, meHandler, userHandler, auditLogMiddleware)
	return httpHandler, nil
}

func NewCleanupUsecase(db database.DB) cleanup.CleanupUsecase {
	authRepository := auth.NewAuthRepository(db)
	transaction := database.NewTransaction(db)
	cleanupUsecase := cleanup.NewCleanupUsecase(authRepository, transaction)
	return cleanupUsecase
}
