// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const deleteLoginKey = `-- name: DeleteLoginKey :exec
DELETE
FROM users_login_key
WHERE user_id = ?
`

func (q *Queries) DeleteLoginKey(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLoginKey, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT uuid, nickname, last_access
FROM users
WHERE id = ?
LIMIT 1
`

type GetUserByIDRow struct {
	Uuid       []byte    `db:"uuid"`
	Nickname   string    `db:"nickname"`
	LastAccess time.Time `db:"last_access"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.Uuid, &i.Nickname, &i.LastAccess)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, nickname, last_access
FROM users
WHERE uuid = ?
LIMIT 1
`

type GetUserByUUIDRow struct {
	ID         int32     `db:"id"`
	Nickname   string    `db:"nickname"`
	LastAccess time.Time `db:"last_access"`
}

func (q *Queries) GetUserByUUID(ctx context.Context, uuid []byte) (GetUserByUUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, uuid)
	var i GetUserByUUIDRow
	err := row.Scan(&i.ID, &i.Nickname, &i.LastAccess)
	return i, err
}

const getUserIDByLoginKey = `-- name: GetUserIDByLoginKey :one
SELECT user_id
FROM users_login_key
WHERE login_key = ?
`

func (q *Queries) GetUserIDByLoginKey(ctx context.Context, loginKey int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByLoginKey, loginKey)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserIDBySub = `-- name: GetUserIDBySub :one
SELECT user_id
FROM users_sub
WHERE sub = ?
`

func (q *Queries) GetUserIDBySub(ctx context.Context, sub string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIDBySub, sub)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserNicknameByID = `-- name: GetUserNicknameByID :one
SELECT nickname
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUserNicknameByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserNicknameByID, id)
	var nickname string
	err := row.Scan(&nickname)
	return nickname, err
}

const getUsersWithRoleByUUIDs = `-- name: GetUsersWithRoleByUUIDs :many
SELECT users.id AS user_id, users.uuid AS user_uuid, users.nickname AS user_nickname, users.last_access AS user_last_access, users.created_at AS user_created_at, users.updated_at AS user_updated_at,
       roles.id AS role_id, roles.name AS role_name, roles.priority AS role_priority, roles.created_at AS role_created_at, roles.updated_at AS role_updated_at
FROM users
LEFT OUTER JOIN users_role on users.id = users_role.user_id
LEFT OUTER JOIN roles on users_role.role_id = roles.id
WHERE users.uuid IN(/*SLICE:uuids*/?)
`

type GetUsersWithRoleByUUIDsRow struct {
	UserID         int32          `db:"user_id"`
	UserUuid       []byte         `db:"user_uuid"`
	UserNickname   string         `db:"user_nickname"`
	UserLastAccess time.Time      `db:"user_last_access"`
	UserCreatedAt  time.Time      `db:"user_created_at"`
	UserUpdatedAt  time.Time      `db:"user_updated_at"`
	RoleID         sql.NullInt32  `db:"role_id"`
	RoleName       sql.NullString `db:"role_name"`
	RolePriority   sql.NullInt32  `db:"role_priority"`
	RoleCreatedAt  sql.NullTime   `db:"role_created_at"`
	RoleUpdatedAt  sql.NullTime   `db:"role_updated_at"`
}

func (q *Queries) GetUsersWithRoleByUUIDs(ctx context.Context, uuids [][]byte) ([]GetUsersWithRoleByUUIDsRow, error) {
	query := getUsersWithRoleByUUIDs
	var queryParams []interface{}
	if len(uuids) > 0 {
		for _, v := range uuids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:uuids*/?", strings.Repeat(",?", len(uuids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:uuids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithRoleByUUIDsRow
	for rows.Next() {
		var i GetUsersWithRoleByUUIDsRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserNickname,
			&i.UserLastAccess,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.RoleID,
			&i.RoleName,
			&i.RolePriority,
			&i.RoleCreatedAt,
			&i.RoleUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLoginKey = `-- name: InsertLoginKey :exec
INSERT INTO users_login_key (user_id, login_key, created_at)
VALUES (?, ?, ?)
`

type InsertLoginKeyParams struct {
	UserID    int32     `db:"user_id"`
	LoginKey  int64     `db:"login_key"`
	CreatedAt time.Time `db:"created_at"`
}

func (q *Queries) InsertLoginKey(ctx context.Context, arg InsertLoginKeyParams) error {
	_, err := q.db.ExecContext(ctx, insertLoginKey, arg.UserID, arg.LoginKey, arg.CreatedAt)
	return err
}

const insertSubForUserID = `-- name: InsertSubForUserID :exec
INSERT INTO users_sub (user_id, sub)
VALUES (?, ?)
`

type InsertSubForUserIDParams struct {
	UserID int32  `db:"user_id"`
	Sub    string `db:"sub"`
}

func (q *Queries) InsertSubForUserID(ctx context.Context, arg InsertSubForUserIDParams) error {
	_, err := q.db.ExecContext(ctx, insertSubForUserID, arg.UserID, arg.Sub)
	return err
}

const updateUserLastAccessByID = `-- name: UpdateUserLastAccessByID :exec
UPDATE users
SET last_access=?,
    updated_at=?
WHERE id = ?
`

type UpdateUserLastAccessByIDParams struct {
	LastAccess time.Time `db:"last_access"`
	UpdatedAt  time.Time `db:"updated_at"`
	ID         int32     `db:"id"`
}

func (q *Queries) UpdateUserLastAccessByID(ctx context.Context, arg UpdateUserLastAccessByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLastAccessByID, arg.LastAccess, arg.UpdatedAt, arg.ID)
	return err
}

const updateUserNicknameByID = `-- name: UpdateUserNicknameByID :exec
UPDATE users
SET nickname=?,
    updated_at=?
WHERE id = ?
`

type UpdateUserNicknameByIDParams struct {
	Nickname  string    `db:"nickname"`
	UpdatedAt time.Time `db:"updated_at"`
	ID        int32     `db:"id"`
}

func (q *Queries) UpdateUserNicknameByID(ctx context.Context, arg UpdateUserNicknameByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNicknameByID, arg.Nickname, arg.UpdatedAt, arg.ID)
	return err
}
