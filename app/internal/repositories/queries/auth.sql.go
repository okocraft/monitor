// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package queries

import (
	"context"
	"time"
)

const deleteRefreshTokenAndAccessToken = `-- name: DeleteRefreshTokenAndAccessToken :exec
DELETE FROM users_refresh_tokens
WHERE id = ?
`

func (q *Queries) DeleteRefreshTokenAndAccessToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenAndAccessToken, id)
	return err
}

const getUserIDAndRefreshTokenIDByJTI = `-- name: GetUserIDAndRefreshTokenIDByJTI :one
SELECT id, user_id FROM users_refresh_tokens
WHERE jti = ?
`

type GetUserIDAndRefreshTokenIDByJTIRow struct {
	ID     int64
	UserID int32
}

func (q *Queries) GetUserIDAndRefreshTokenIDByJTI(ctx context.Context, jti []byte) (GetUserIDAndRefreshTokenIDByJTIRow, error) {
	row := q.db.QueryRowContext(ctx, getUserIDAndRefreshTokenIDByJTI, jti)
	var i GetUserIDAndRefreshTokenIDByJTIRow
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getUserIDByAccessTokenJTI = `-- name: GetUserIDByAccessTokenJTI :one
SELECT user_id FROM users_access_tokens WHERE jti = ?
`

func (q *Queries) GetUserIDByAccessTokenJTI(ctx context.Context, jti []byte) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByAccessTokenJTI, jti)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const insertAccessToken = `-- name: InsertAccessToken :exec
INSERT INTO users_access_tokens (user_id, refresh_token_id, jti, created_at)
VALUES (?, ?, ?, ?)
`

type InsertAccessTokenParams struct {
	UserID         int32
	RefreshTokenID int64
	Jti            []byte
	CreatedAt      time.Time
}

func (q *Queries) InsertAccessToken(ctx context.Context, arg InsertAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertAccessToken,
		arg.UserID,
		arg.RefreshTokenID,
		arg.Jti,
		arg.CreatedAt,
	)
	return err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO users_refresh_tokens (user_id, jti, ip, user_agent, created_at)
VALUES (?, ?, ?, ?, ?)
`

type InsertRefreshTokenParams struct {
	UserID    int32
	Jti       []byte
	Ip        []byte
	UserAgent string
	CreatedAt time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken,
		arg.UserID,
		arg.Jti,
		arg.Ip,
		arg.UserAgent,
		arg.CreatedAt,
	)
	return err
}
