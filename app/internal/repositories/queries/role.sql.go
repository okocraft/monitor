// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package queries

import (
	"context"
	"time"
)

const createRoleWithIDIfNotExists = `-- name: CreateRoleWithIDIfNotExists :exec
INSERT IGNORE INTO roles (id, uuid, name, priority, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateRoleWithIDIfNotExistsParams struct {
	ID        int32     `db:"id"`
	Uuid      []byte    `db:"uuid"`
	Name      string    `db:"name"`
	Priority  int32     `db:"priority"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) CreateRoleWithIDIfNotExists(ctx context.Context, arg CreateRoleWithIDIfNotExistsParams) error {
	_, err := q.db.ExecContext(ctx, createRoleWithIDIfNotExists,
		arg.ID,
		arg.Uuid,
		arg.Name,
		arg.Priority,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const existsRoleByID = `-- name: ExistsRoleByID :one
SELECT EXISTS(
    SELECT id FROM roles WHERE id = ?
)
`

func (q *Queries) ExistsRoleByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsRoleByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
