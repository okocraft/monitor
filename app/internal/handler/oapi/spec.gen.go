// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX32/cRBD+V1YLEi/O+aAFpHsLRa0iEqjaRDxEUbW3Htvbs3fM7DjhiPy/o1n7fvjs",
	"AK0ILzzlvDsef9833+xOHrXFukEPnoNePepgS6hN/HluLYRwjRvwvzour0AWG8IGiB3EEBNDPrDEyHMG",
	"wZJr2KHXK80lqD5C9RGJ5m0DeqUDk/OF7hJdx6ymqn7J9er2UX9JkOuV/iI9wEoHTOkV6O4umfmIbYnA",
	"c7VVFRYFZGfOqzYAKedz1F2XaILfWkeQ6dXtGHREcLcHhuuPYFmAvepzvjXFDO+Wqnm6LVUKcyU/G1Mc",
	"I1uD84W6d/AAmU50jlQb1quYaqLLCWKJmcP4BrGo4BIL52/eXU5hEmSOwPKHJ/H2Gb4KIpzzPWZJ9YkA",
	"Rx+aQzpnHu/sxpveABNftK3LZOOv/HBzc/HjVCt5MTkkn0MTX5zVI+4ck++zjeEl+vezAs+GRQlZDO/t",
	"189c3SBxpBkp7jI1hku90oXjsl0vLNZpgTmFVLbT+291J3wC2JYcb98LUThtxvNWUpyil1Uk9weo9XbU",
	"dUEnfVcLijUYAjowKpkbUeT9xjXzeX9GZVouwbOzRtaUB8iih/dZPXo4zSk8YvtJdR1XsnOF3jGSOn97",
	"oRN9DxT6bywXy8VSYGAD3jROr/SLuNTrFQVIBUVaRL+m1lTV2tiNbBTAU9SvhgCVE9aDy3XMT5HERXYU",
	"9Jqw3ocQhAZ96FV/sfx+mvvdYHZ56hL9cvndzPcrB54VECHp45LGQ+6g9u2dnGhsiiDejWt3Ej5iWzm/",
	"SR9jh/4E2y52EoYZ1q8dBR5a+cFxORBX59Zi63kiwKXzGzna9+QbQ6YGBgoRp5Ok0bHJzsY7FPq465ha",
	"GOxgZrpZKI5k/Wa5lD8WPYOPPEzTVIO/0o8B/eEq+rtD4OQMjL4bq3JdghKsEFiVJqjQWhstvPiPyifY",
	"ni7a5T8vl0SO6jXQ+gGz7b8m6PHF141PV6lz9/+sZYUFtvx0FS/8valcZljw5QSh7AcMZXymTiaOSVUl",
	"80TWl9OPXJdAoFxQHtUguGJUAXymciTFpQs7eRK1bjkOIiWYDCio2sgUIoNR3lYL1Qv29cxN0l8eLqjW",
	"m92tIgJ/rnaDIE+L964POB0WxzoNQUcXoX5GK06H389w4zOL249Os/dfAazw4XgKPpXzDfAVPKeCny5Z",
	"d2B5BcLxVJPJEDSSZj9qxb0u2T/H/xu6PwMAAP//o25h8OoMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
