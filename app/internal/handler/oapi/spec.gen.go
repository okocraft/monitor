// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SX32/kNBDH/xXLIPGSbhbuAGnflkN3quhC1WvFQ1VVXmeS+DbxBHvSsqzyv6Nxsj/y",
	"o1yvorzw1CaejL/zmfF4dic1lhVasOTlYie9zqFU4d+l1uD9NW7A/m4oX8HSJpcqg0twpfHeoA1mlcMK",
	"HBkITyp8dE/8FT8n4LUzFRm0ciEpB9FaiNYikrStQC6kJ2dsJptIlhD8FMVvqVzc7uTXDlK5kF/FR6Fx",
	"pzJegWzuoolNdO0cWCq2osAsg+TMWFF7cMLYFHmXSmVwX/Ujed6eQwTTAti/OPXfNJF08EdtHCRycdsH",
	"FaKeEHV34IPrT6CJlb9rQ2MZY/y1K6ap164QmIqDtCOgNRibiQcDj5DISKboSkVyEVyN0jMIgm2mNH5A",
	"zAq4wMzYm6uLsUwHiXGg6f5Jva2Hbzznz9hWM7v6QoG9jaaUriYgWqM3VrV1OCrPujYJL/xTidzcnP88",
	"ZsUfRkfnU2o+e7y4hv2JrjViAcqONwt2U1sEbZPIw8op31Zwn0Ak/zzL8Kx7ySaz7rvD+zNTVugokAwU",
	"954qRblcyMxQXq9nGss4w9T5mJfjh+9lw1F40LUztP3ILGHYiJY1uxiq57fozF8g1ttef/EyajtaYAXK",
	"gTtGlBNVTOTjxlTTfn9FoWrKwZLRit8JC5CEY3LwatHC0CfHERoNJ8pQwSsrtIbQieXluYzkAzjf7jGf",
	"zWdzloEVWFUZuZBvwquWVwAQs4o4C0ci1qoo1kpveCEDGqt+1xmI1GHZHSQZ/LsQxHlyYvTeYXkwceAr",
	"tL6l/mb+49j3VXee+KmJ5Nv5DxP7FwYsCXAOnTxNaWitR9q3d9w6SWWeKza8u2PzXrSFsZt4F5rAL7Bt",
	"wolAPxH1e+M8dd3i0VDeBS6WWmNtaQTgwtgNX2uH4CvlVAkUztftThp2Gio22pfxXoU8PWvkaujKQU00",
	"DA6xh/W7+Zz/aLQENsShqqro6iv+5NEer+HP9ZlBmw1116dynYNgreBJ5MoLX2sdSnj2H6WPtT2dtIvn",
	"p4ste/nqwvoJk+2/BvT0bm36PZXz3Pw/c1lghjU9ncVz+6AKkyhifakDn7djjVA2EYM5Z5RV9jzC+na8",
	"yXUODoTxwqLogAtC4cEmIkUnKDd+jycS65rCrJODSsB5USoedHgETOtiJlpg307cJO3lYbyordrfKgz4",
	"pew6IE/Du2oNhmNxn1NndHIRylcsxecM/i+oz1fG3c5rkzdiBiTw8fQXwBDwB6AVvCbTFXwpsuYY5Qo4",
	"xiGT0VjUQ3MYvsJaEx2ew2+m5u8AAAD//0rUrBz4DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
