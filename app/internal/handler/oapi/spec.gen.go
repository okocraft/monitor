// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"80ywfar7yeY51LKH1V8BAAD//xfzWBhxGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
