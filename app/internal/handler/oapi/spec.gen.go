// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXT2/jxg/9KoP5/YBeFNvdpC3gW3aLXQSN2yCboIfACMYSLc1amlE5VLKuoe9ecEb+",
	"I0tOnCDppTdLosnHxzckZyVjW5TWgCEnxyvp4gwK5X+exzE4d2MXYP7UlE3g3CRXKoUrwEI7p63xZiXa",
	"EpA0+Cfl/3RP/C9+TsDFqEvS1sixpAxEsBDBIpK0LEGOpSPUJpV1JAvwfvL8j7kc363k/xHmciz/N9wC",
	"HTYohxOQ9TTqCRJXiGAoX4rcpikkJ9qIygEKbeaWo5QqhfuynclxMfcp6AfA/sWu/7qOJMJflUZI5Piu",
	"TZTPugfUdMOPnX2DmBj5p5Aaw+jSX2Hez3qFubBzsYG2JWgG2qTiQcMjJDKSc4uFIjn2rjrl2UuCbfow",
	"frE2zeHSptrcXl92YSIkGiGm+4N4g4cfHNdPm4CZXb0QYCtQH9JJD4lGxwujgg478qwqnfCHpyRye3vx",
	"a5cr/mO0dd6H5tnjxRp2O7hm1uagTDeYt+sLcW3znpRjBEWQ3DOxqy3FiSI4Ie3F2WEi8LCx1YZOP2zt",
	"tCFIAdnwIJclaoualkf6qcrkhSD3WAkFUOGsrWNHu8m3gvTR50vbq1j/ZVeeod5tRJH8fpLak+Ylmwya",
	"/23en+iitOhTDMStPZWKMjmWqaasmg1iWwxTO0c35M/Dh598trcO8C2r+7zKI5krR/ehnR3v/skzho1G",
	"n4rudfx2oljDaadzWBsNyK5E6kg6iCuW1leGCvuz9LziMu4riN9a1H+DmC1bI5JB+Jz9cQeFgNuUMqKS",
	"Sfi60GW/39+tUBVlYEjHit8JA5D4Tr/xaqyBfZ+ch5+VXB9NXA85sUaTRXF+dSEj+QDoQozRYDQYMQxb",
	"glGllmN56l8FzXoChoximPquPoxVns9UvOAPKVAX9afGQMzRFs0skN4/+iQukh2jz2iLjQmCK61xgfXT",
	"0S9d39fNSOCnOpJno5974ucaDAlAtNgqqd8OtmzfTXn6k0odK8m/m7J5K9tcm8Vw5efYb7Cs/fG0rifr",
	"zxodNQPvUVPWJC7O49hWhjoEXGqz4M1sk3ypUBVAfkTcraRmp75rrHuwXKOQu2eAsIJGDqrnPHKKLVo/",
	"jEa+q1hDYHweqizzRl/Db86a7Sb53DHe2xS87tqs3GQgGCs4EplywlVx7CU8+JfKx9gOF+3y+HKxZate",
	"TVofbbJ8M0J318O63eu4zvV/s5a5TW1Fh6t4YR5Urrm7C4Q5gsvCZi6UScTeqt6pKnvu0HrWDXKTAYLQ",
	"ThgrGsIFWeHAJGJuUVCm3ZqeSMwq8ut6BioBdKJQvKvzLWZe5QMRCPuxZ5KE4aGdqIxaTxUm+LXcNYQc",
	"Ju86GOzf7No8NUY7g1C+oxSPubu+Qp/vTHdYh3onYgok7OPuJXaf4C9AE3hPTifwUsrqbZYTaHLc3GD6",
	"tcR5ehPeg3Ti+tLkJdd9XF74r6/toZqgcMeuuM1EVIhq+R5d9TgwLlyDumBeJuJRb2cSDvABUMS2yhNh",
	"LInKcN8h7oC04zKpgLuWDh1TuKUh9b1xffa0a2XY71y3PUIiEJytMIa2ZnzC07pzkjrLdOtAba5N/lsd",
	"bZ5Zv9unwOa0/icAAP//KafIvQETAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
