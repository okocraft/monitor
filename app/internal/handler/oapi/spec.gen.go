// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX32/bRgz+Vw63AXtRYq/tNsBvaYcWweKtSBvsITCCs0RLV0tHjUel9Qz97wNP8g9Z",
	"cuoETV/2Zkk0+fHjdyRvrWMsSnTg2OvJWvs4g8KEnxdxDN5/xCW4vy1nU7hwyXuTwnugwnpv0QWzkrAE",
	"YgvhyYQ/3bH8S54T8DHZki06PdGcgWosVGMRaV6VoCfaM1mX6jrSBQQ/ef7XQk9u1/pHgoWe6B9GO6Cj",
	"FuVoCrqeRQNB4ooIHOcrlWOaQnJmnao8kLJugRKlNCncld1MTot5SMEwAPGv9v3XdaQJ/qksQaInt12i",
	"QtYDoGZbfnD+CWIW5G+a1ARGn/6K8mHWK8oVLtQW2o6gOViXqnsLnyHRkV4gFYb1JLjqlecgCbEZwvgO",
	"Mc3hClPrbq6v+jAJEksQ891RvI2Hn7zUz7oGs7h6JMBOoCGk0wESnY2XzjQ67MmzqmwiHx6SyM3N5e99",
	"ruSP0c75EJqvHi/RsN/DNUfMwbh+sGA3FOIa84GUYwLDkNwJsesdxYlhOGMbxNlj4lQeIn2UzJIskuVV",
	"J6h1/PLFLqB1DClQ4L5MHonygJamAqY5bJvY0X72nSBD/IWcBiUbvuzrsyl4F1Gkv5yleNa+FJPz9n/b",
	"92e2KJFCig1xG0+l4UxPdGo5q+bnMRajFBfkR/J5dP9LyPbGA33v8ubG813Tz053/+Aho1akD0UPQv52",
	"otjA6aZzXBstyL5E6kh7iCuR1geBCofD9KKSMh4qSN4i2X9BzVedGSkgQs7hvIMhoF1KGXMpJHxY2nLY",
	"75+oTMUZOLaxkXfKASSh1W+9OnRw6FPyCMNS6mNZ6qGn6CwjqYv3lzrS90C+iTE+H5+PBQaW4Exp9US/",
	"DK8azQYCRoJilIa2PopNns9NvJQPKXAf9ZvWQC0Ii3YY6OCfQhKXyZ7RW8Jia0LgS3S+Yf3l+Le+7+t2",
	"JshTHelX418H4ucWHCsgQuqUNKwHO7ZvZzL+2aRelBTezcS8k21u3XK0DoPsD1jV4XiiH8j6rSXP7cT7",
	"bDlrE1cXcYyV4x4BV9YtZTXbJl8aMgVwmBG3a23Faegamx6sNyj0/hlgqqCVgxk4j5Jih9YX43HoKugY",
	"XMjDlGXe6mv0yaPbrZJfO8YHq0LQXZeVjxkowQqeVWa88lUcBwmff6fyCbbjRbs6vVxi2alXm9ZrTFbf",
	"jND9/bDu9jqpc/3/rGWOKVZ8vIqX7t7kVrq7IlgQ+KxZzZVxiTrY1XtVFc89Wl/1g3zMgEBZrxyqlnDF",
	"qDy4RC2QFGfWb+iJ1LzisK9nYBIgrwojy7pcYxZVfq4awn4emCTN8LBeVc5spooQ/FTuWkKOk3fdGBxe",
	"7bo8tUZ7g1A/oxRPubw+QZ/PTHezDg1OxBRY4ef9W+whwe+Ap/CcnE7hsZTVuyyn0Oa4vcIMa0nyDCay",
	"B9nED6UpS65/vboMX5/aQy1D4U9dcduJaIjM6jm66mlgfHMN6oN5nIjHg51JeaB7IBVjlSfKIavKSd9h",
	"6YC85zKpQLqWbTqm8ivH5kvr+tXDro0Tvwvb9QiJIvBYUQxdzYSEZ3XvJPWW6c6B2l6bwrc62j6LfndP",
	"DZuz+r8AAAD///wU1jsCEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
