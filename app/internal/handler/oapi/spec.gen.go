// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/bNhD/KgQ3YC9K7LXdBvgtTdciWNwF+YM9BIFBSyeJtUyqx1Naz/B3H46UbcmS",
	"Uzto+rI3Szre/e53x/vjpYztvLQGDDk5WkoX5zBX/udZHINzt3YG5h9N+RjOTHKlMrgCnGvntDVerERb",
	"ApIG/6T8oQnxKX5OwMWoS9LWyJGkHESQEEEikrQoQY6kI9Qmk6tIzsHrKYq/Uzm6X8qfEVI5kj8NtkAH",
	"NcrBGOTqIeoxEleIYKhYiMJmGSQn2ojKAQptUstWSpXBpGx7cpjNXQr6AbB+0dS/WkUS4XOlERI5um8T",
	"5b3uAfWw4cdOP0FMjPw8uMYwuvRXWPSzXmEhbCo20LYETUGbTDxq+AKJjGRqca5IjryqTnh2nGCZPowf",
	"rM0KuLSZNnfXl12YCIlGiGmyF2/Q8Ivj+GkTMLOqIwG2DPUhHfeQaHQ8MyrkYSc9q0on/OGpFLm7u3jX",
	"5YoPRlvlfWi+eb04h10D19TaApTpGvNyfSaubdHjcoygCJIJE7vcUpwoghPSPjk7TBzKQyT3klmitqhp",
	"0TKqDb1+tTWoDUEG6LkvkyNR7tASIqDCZVvbjpret4z08XdjkW79y6UEU81Z7dnNuYzkuz9vzhtHtl7y",
	"ETUt4M4BvlOkdo9/1PHsYwB1qRyFuisjeR5gnTGqu4DK/+YQ1vL882rtSJ9tH4LeG+a/NK9TyM+2hkh+",
	"PcnsSf2SRU7rc5v3J3peWvQRCXFeayoV5XIkM015NT2N7XyQ2RTdgD8PHn/zwWFKfnQ2FsrRJJTfw9U/",
	"WROwvlNPWff37vvl8BpO2539qVyD7Gb0KpIO4ooT6Iahwm7vP6s4jLsZxG8t6n9BTBetls4gvM++PIFC",
	"wK1LOVHpb8RMl/16P1qhKsrBkI4VvxMGIPGdaaPVWAO7OtkP39s5Ppo4HnJsjSaL4uzqQkbyEdAFG8PT",
	"4emQYdgSjCq1HMnX/lXIWU/AgFEMMt+FBrEqiqmKZ/whA+qiPq8FRIp2Xvcu6fWjd+IiaQi9RzvfiCC4",
	"0hoXWH89/KOr+7puYfy0iuSb4e899gsNhgQgWmyF1E8zW7bvH3haIZU5X7b43QOLt7wttJkNlr7v/gWL",
	"lb+e1vV4/V6jo7pBf9GU146Lszi2laEOAZfazHiS3DhfKlRzIN/S7pdSs1JfNdYtQ65RyOYdIKygTgfV",
	"cx/ZxRatr4ZDX1WsITDeD1WWRZ1fg0/Omu3k+61rvDPZ+Lxrs3Kbg2Cs4EjkyglXxbFP4dMfFD7Gtj9o",
	"l4eHiyVb8ardemuTxXcjtDnOrtq1juO8+n/GsrCZrWh/FC/Moyo0V3eBkCK4PGwSQplE7KwWnaiy5g6t",
	"b7pGbnNAENoJY0VNuCArHJhEpBYF5dqt6YnEtCK/XuSgEkAn5op3C9660qo4FYGwX3s6SWge2onKqHVX",
	"YYKfy11NyH7yroPA7iba5qkWajRC+YKpeMiu/Yz8fGG6wzjU2xEzIGG/NJfuXYI/AI3hJTkdw7GUrbZe",
	"jqH2cbNx9ecS++lFeA7Sietzk4dc93Zx4b8+t4Zqgrk7dMStO6JCVIuXqKqHgXFha+uCOS6Jh72VSTjA",
	"R0AR26pIhLEkKsN1h7gCUkNlUgFXLR0qpnALQ+prrfrN06qVYb2pbmuERCA4W2EM7ZzxDjeyZuBAYZw/",
	"eUfC/ejJmxt/1qdOd1KCr2VhE5CjVBUOojA5fa4AF9vRqbEi7B+VosN0NXaMyRRSi22th20xx5tSKfnt",
	"4WUs8UI00UlL/yH/6hym3Vnk1Wu6OFh/798ER9mbeCaOsVfbePgh9WBvcXpWhV7ftt2+1VldW+1r8yeF",
	"/8bk1s/cLbZPoXY9rP4LAAD//0b+F4gfFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
