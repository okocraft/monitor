// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
