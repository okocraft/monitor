// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
