// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	AccessTokenAuthScopes = "AccessTokenAuth.Scopes"
	SkipAuthScopes        = "SkipAuth.Scopes"
)

// Defines values for SortType.
const (
	SortTypeASC  SortType = "ASC"
	SortTypeDESC SortType = "DESC"
)

// Defines values for SortableRoleDataType.
const (
	SortableRoleDataTypeCreatedAt SortableRoleDataType = "CreatedAt"
	SortableRoleDataTypeName      SortableRoleDataType = "Name"
	SortableRoleDataTypePriority  SortableRoleDataType = "Priority"
	SortableRoleDataTypeUpdatedAt SortableRoleDataType = "UpdatedAt"
)

// Defines values for SortableUserDataType.
const (
	SortableUserDataTypeCreatedAt    SortableUserDataType = "CreatedAt"
	SortableUserDataTypeLastAccess   SortableUserDataType = "LastAccess"
	SortableUserDataTypeNickName     SortableUserDataType = "NickName"
	SortableUserDataTypeRoleName     SortableUserDataType = "RoleName"
	SortableUserDataTypeRolePriority SortableUserDataType = "RolePriority"
	SortableUserDataTypeUpdatedAt    SortableUserDataType = "UpdatedAt"
)

// AccessTokenWithMeAndPagePermissions defines model for AccessTokenWithMeAndPagePermissions.
type AccessTokenWithMeAndPagePermissions struct {
	// AccessToken the access token
	AccessToken string `json:"access_token"`

	// Me the currently logged-in user info
	Me Me `json:"me"`

	// PagePermissions the page permissions
	PagePermissions PagePermissions `json:"page_permissions"`
}

// CurrentPage defines model for CurrentPage.
type CurrentPage struct {
	// Url the url of the page currently being viewed
	Url string `json:"url"`
}

// GoogleLoginURL defines model for GoogleLoginURL.
type GoogleLoginURL struct {
	// RedirectUrl the Google's login page URL
	RedirectUrl string `json:"redirect_url"`
}

// Me defines model for Me.
type Me struct {
	Nickname string `json:"nickname"`
	RoleName string `json:"role_name"`

	// RoleUuid the UUID
	RoleUuid UUID `json:"role_uuid"`

	// Uuid the UUID
	Uuid UUID `json:"uuid"`
}

// PagePermissions defines model for PagePermissions.
type PagePermissions struct {
	Settings SettingPagePermissions `json:"settings"`
}

// Role defines model for Role.
type Role struct {
	CreatedAt time.Time `json:"created_at"`

	// Id the UUID
	Id        UUID      `json:"id"`
	Name      string    `json:"name"`
	Priority  int32     `json:"priority"`
	UpdatedAt time.Time `json:"updated_at"`
}

// SettingPagePermissions defines model for SettingPagePermissions.
type SettingPagePermissions struct {
	Roles bool `json:"roles"`
	Users bool `json:"users"`
}

// SortType defines model for SortType.
type SortType string

// SortableRoleDataType defines model for SortableRoleDataType.
type SortableRoleDataType string

// SortableUserDataType defines model for SortableUserDataType.
type SortableUserDataType string

// UUID the UUID
type UUID = uuid.UUID

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"created_at"`

	// Id the UUID
	Id         UUID      `json:"id"`
	LastAccess time.Time `json:"last_access"`
	Nickname   string    `json:"nickname"`
	Role       Role      `json:"role"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	SortedBy *SortableRoleDataType `form:"sorted_by,omitempty" json:"sorted_by,omitempty"`
	SortType *SortType             `form:"sort_type,omitempty" json:"sort_type,omitempty"`
}

// GetUsersByIdsJSONBody defines parameters for GetUsersByIds.
type GetUsersByIdsJSONBody = []UUID

// SearchUsersParams defines parameters for SearchUsers.
type SearchUsersParams struct {
	Nickname         *string               `form:"nickname,omitempty" json:"nickname,omitempty"`
	LastAccessBefore *time.Time            `form:"last_access_before,omitempty" json:"last_access_before,omitempty"`
	LastAccessAfter  *time.Time            `form:"last_access_after,omitempty" json:"last_access_after,omitempty"`
	RoleId           *UUID                 `form:"role_id,omitempty" json:"role_id,omitempty"`
	SortedBy         *SortableUserDataType `form:"sorted_by,omitempty" json:"sorted_by,omitempty"`
	SortType         *SortType             `form:"sort_type,omitempty" json:"sort_type,omitempty"`
}

// LoginWithGoogleJSONRequestBody defines body for LoginWithGoogle for application/json ContentType.
type LoginWithGoogleJSONRequestBody = CurrentPage

// GetUsersByIdsJSONRequestBody defines body for GetUsersByIds for application/json ContentType.
type GetUsersByIdsJSONRequestBody = GetUsersByIdsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /auth/google/callback)
	CallbackFromGoogle(w http.ResponseWriter, r *http.Request)

	// (POST /auth/google/link/{loginKey})
	LinkWithGoogle(w http.ResponseWriter, r *http.Request, loginKey string)

	// (POST /auth/google/login)
	LoginWithGoogle(w http.ResponseWriter, r *http.Request)

	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)

	// (POST /auth/refresh)
	RefreshAccessToken(w http.ResponseWriter, r *http.Request)

	// (GET /me)
	GetMe(w http.ResponseWriter, r *http.Request)

	// (GET /roles)
	GetRoles(w http.ResponseWriter, r *http.Request, params GetRolesParams)

	// (POST /users)
	GetUsersByIds(w http.ResponseWriter, r *http.Request)

	// (GET /users/search)
	SearchUsers(w http.ResponseWriter, r *http.Request, params SearchUsersParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /auth/google/callback)
func (_ Unimplemented) CallbackFromGoogle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /auth/google/link/{loginKey})
func (_ Unimplemented) LinkWithGoogle(w http.ResponseWriter, r *http.Request, loginKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /auth/google/login)
func (_ Unimplemented) LoginWithGoogle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /auth/logout)
func (_ Unimplemented) Logout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /auth/refresh)
func (_ Unimplemented) RefreshAccessToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /me)
func (_ Unimplemented) GetMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /roles)
func (_ Unimplemented) GetRoles(w http.ResponseWriter, r *http.Request, params GetRolesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) GetUsersByIds(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /users/search)
func (_ Unimplemented) SearchUsers(w http.ResponseWriter, r *http.Request, params SearchUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CallbackFromGoogle operation middleware
func (siw *ServerInterfaceWrapper) CallbackFromGoogle(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SkipAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CallbackFromGoogle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LinkWithGoogle operation middleware
func (siw *ServerInterfaceWrapper) LinkWithGoogle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "loginKey" -------------
	var loginKey string

	err = runtime.BindStyledParameterWithOptions("simple", "loginKey", chi.URLParam(r, "loginKey"), &loginKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "loginKey", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SkipAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinkWithGoogle(w, r, loginKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginWithGoogle operation middleware
func (siw *ServerInterfaceWrapper) LoginWithGoogle(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SkipAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginWithGoogle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SkipAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshAccessToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SkipAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshAccessToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AccessTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoles operation middleware
func (siw *ServerInterfaceWrapper) GetRoles(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AccessTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesParams

	// ------------- Optional query parameter "sorted_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "sorted_by", r.URL.Query(), &params.SortedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sorted_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort_type", r.URL.Query(), &params.SortType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersByIds operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByIds(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AccessTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersByIds(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchUsers operation middleware
func (siw *ServerInterfaceWrapper) SearchUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AccessTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUsersParams

	// ------------- Optional query parameter "nickname" -------------

	err = runtime.BindQueryParameter("form", false, false, "nickname", r.URL.Query(), &params.Nickname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nickname", Err: err})
		return
	}

	// ------------- Optional query parameter "last_access_before" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_access_before", r.URL.Query(), &params.LastAccessBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_access_before", Err: err})
		return
	}

	// ------------- Optional query parameter "last_access_after" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_access_after", r.URL.Query(), &params.LastAccessAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_access_after", Err: err})
		return
	}

	// ------------- Optional query parameter "role_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "role_id", r.URL.Query(), &params.RoleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	// ------------- Optional query parameter "sorted_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "sorted_by", r.URL.Query(), &params.SortedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sorted_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort_type", r.URL.Query(), &params.SortType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/google/callback", wrapper.CallbackFromGoogle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/google/link/{loginKey}", wrapper.LinkWithGoogle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/google/login", wrapper.LoginWithGoogle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.RefreshAccessToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/me", wrapper.GetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/roles", wrapper.GetRoles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.GetUsersByIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/search", wrapper.SearchUsers)
	})

	return r
}
