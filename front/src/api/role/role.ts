/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Monitor API
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { GetRolesParams, Role } from ".././model";

/**
 * get all roles
 */
export const getRoles = (
    params?: GetRolesParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<Role[]>> => {
    return axios.default.get(`/roles`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetRolesQueryKey = (params?: GetRolesParams) => {
    return [`/roles`, ...(params ? [params] : [])] as const;
};

export const getGetRolesQueryOptions = <
    TData = Awaited<ReturnType<typeof getRoles>>,
    TError = AxiosError<unknown>,
>(
    params?: GetRolesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetRolesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoles>>> = ({
        signal,
    }) => getRoles(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getRoles>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetRolesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoles>>
>;
export type GetRolesQueryError = AxiosError<unknown>;

export function useGetRoles<
    TData = Awaited<ReturnType<typeof getRoles>>,
    TError = AxiosError<unknown>,
>(
    params: undefined | GetRolesParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoles>>,
                    TError,
                    Awaited<ReturnType<typeof getRoles>>
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
};
export function useGetRoles<
    TData = Awaited<ReturnType<typeof getRoles>>,
    TError = AxiosError<unknown>,
>(
    params?: GetRolesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getRoles>>,
                    TError,
                    Awaited<ReturnType<typeof getRoles>>
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetRoles<
    TData = Awaited<ReturnType<typeof getRoles>>,
    TError = AxiosError<unknown>,
>(
    params?: GetRolesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetRoles<
    TData = Awaited<ReturnType<typeof getRoles>>,
    TError = AxiosError<unknown>,
>(
    params?: GetRolesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetRolesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
