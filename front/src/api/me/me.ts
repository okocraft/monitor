/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Monitor API
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type { Me } from ".././model";

/**
 * get own user info
 */
export const getMe = (
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<Me>> => {
    return axios.default.get(`/me`, options);
};

export const getGetMeQueryKey = () => {
    return [`/me`] as const;
};

export const getGetMeQueryOptions = <
    TData = Awaited<ReturnType<typeof getMe>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetMeQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({
        signal,
    }) => getMe({ signal, ...axiosOptions });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getMe>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = AxiosError<unknown>;

export function useGetMe<
    TData = Awaited<ReturnType<typeof getMe>>,
    TError = AxiosError<unknown>,
>(options: {
    query: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getMe>>,
                TError,
                Awaited<ReturnType<typeof getMe>>
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
};
export function useGetMe<
    TData = Awaited<ReturnType<typeof getMe>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getMe>>,
                TError,
                Awaited<ReturnType<typeof getMe>>
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMe<
    TData = Awaited<ReturnType<typeof getMe>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetMe<
    TData = Awaited<ReturnType<typeof getMe>>,
    TError = AxiosError<unknown>,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getGetMeQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
