/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Monitor API
 * OpenAPI spec version: 0.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
    MutationFunction,
    UseMutationOptions,
    UseMutationResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { User, Uuid } from ".././model";

/**
 * get users by ids
 */
export const getUsersByIds = (
    uuid: Uuid[],
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
    return axios.default.post(`/users`, uuid, options);
};

export const getGetUsersByIdsMutationOptions = <
    TError = AxiosError<void>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof getUsersByIds>>,
        TError,
        { data: Uuid[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof getUsersByIds>>,
    TError,
    { data: Uuid[] },
    TContext
> => {
    const mutationKey = ["getUsersByIds"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
        ? options.mutation &&
          "mutationKey" in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof getUsersByIds>>,
        { data: Uuid[] }
    > = (props) => {
        const { data } = props ?? {};

        return getUsersByIds(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type GetUsersByIdsMutationResult = NonNullable<
    Awaited<ReturnType<typeof getUsersByIds>>
>;
export type GetUsersByIdsMutationBody = Uuid[];
export type GetUsersByIdsMutationError = AxiosError<void>;

export const useGetUsersByIds = <
    TError = AxiosError<void>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof getUsersByIds>>,
        TError,
        { data: Uuid[] },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof getUsersByIds>>,
    TError,
    { data: Uuid[] },
    TContext
> => {
    const mutationOptions = getGetUsersByIdsMutationOptions(options);

    return useMutation(mutationOptions);
};
