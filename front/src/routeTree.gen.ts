/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as MypageIndexImport } from './routes/mypage/index'
import { Route as ExampleIndexImport } from './routes/example/index'
import { Route as SettingsUsersIndexImport } from './routes/settings/users/index'
import { Route as GoogleResultIndexImport } from './routes/google/result/index'
import { Route as GoogleLoginIndexImport } from './routes/google/login/index'
import { Route as GoogleLinkIndexImport } from './routes/google/link/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const MypageIndexRoute = MypageIndexImport.update({
  id: '/mypage/',
  path: '/mypage/',
  getParentRoute: () => rootRoute,
} as any)

const ExampleIndexRoute = ExampleIndexImport.update({
  id: '/example/',
  path: '/example/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsUsersIndexRoute = SettingsUsersIndexImport.update({
  id: '/settings/users/',
  path: '/settings/users/',
  getParentRoute: () => rootRoute,
} as any)

const GoogleResultIndexRoute = GoogleResultIndexImport.update({
  id: '/google/result/',
  path: '/google/result/',
  getParentRoute: () => rootRoute,
} as any)

const GoogleLoginIndexRoute = GoogleLoginIndexImport.update({
  id: '/google/login/',
  path: '/google/login/',
  getParentRoute: () => rootRoute,
} as any)

const GoogleLinkIndexRoute = GoogleLinkIndexImport.update({
  id: '/google/link/',
  path: '/google/link/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/example/': {
      id: '/example/'
      path: '/example'
      fullPath: '/example'
      preLoaderRoute: typeof ExampleIndexImport
      parentRoute: typeof rootRoute
    }
    '/mypage/': {
      id: '/mypage/'
      path: '/mypage'
      fullPath: '/mypage'
      preLoaderRoute: typeof MypageIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/google/link/': {
      id: '/google/link/'
      path: '/google/link'
      fullPath: '/google/link'
      preLoaderRoute: typeof GoogleLinkIndexImport
      parentRoute: typeof rootRoute
    }
    '/google/login/': {
      id: '/google/login/'
      path: '/google/login'
      fullPath: '/google/login'
      preLoaderRoute: typeof GoogleLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/google/result/': {
      id: '/google/result/'
      path: '/google/result'
      fullPath: '/google/result'
      preLoaderRoute: typeof GoogleResultIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/users/': {
      id: '/settings/users/'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsUsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/example': typeof ExampleIndexRoute
  '/mypage': typeof MypageIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/google/link': typeof GoogleLinkIndexRoute
  '/google/login': typeof GoogleLoginIndexRoute
  '/google/result': typeof GoogleResultIndexRoute
  '/settings/users': typeof SettingsUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/example': typeof ExampleIndexRoute
  '/mypage': typeof MypageIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/google/link': typeof GoogleLinkIndexRoute
  '/google/login': typeof GoogleLoginIndexRoute
  '/google/result': typeof GoogleResultIndexRoute
  '/settings/users': typeof SettingsUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/example/': typeof ExampleIndexRoute
  '/mypage/': typeof MypageIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/google/link/': typeof GoogleLinkIndexRoute
  '/google/login/': typeof GoogleLoginIndexRoute
  '/google/result/': typeof GoogleResultIndexRoute
  '/settings/users/': typeof SettingsUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/example'
    | '/mypage'
    | '/settings'
    | '/google/link'
    | '/google/login'
    | '/google/result'
    | '/settings/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/example'
    | '/mypage'
    | '/settings'
    | '/google/link'
    | '/google/login'
    | '/google/result'
    | '/settings/users'
  id:
    | '__root__'
    | '/'
    | '/example/'
    | '/mypage/'
    | '/settings/'
    | '/google/link/'
    | '/google/login/'
    | '/google/result/'
    | '/settings/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExampleIndexRoute: typeof ExampleIndexRoute
  MypageIndexRoute: typeof MypageIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  GoogleLinkIndexRoute: typeof GoogleLinkIndexRoute
  GoogleLoginIndexRoute: typeof GoogleLoginIndexRoute
  GoogleResultIndexRoute: typeof GoogleResultIndexRoute
  SettingsUsersIndexRoute: typeof SettingsUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExampleIndexRoute: ExampleIndexRoute,
  MypageIndexRoute: MypageIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  GoogleLinkIndexRoute: GoogleLinkIndexRoute,
  GoogleLoginIndexRoute: GoogleLoginIndexRoute,
  GoogleResultIndexRoute: GoogleResultIndexRoute,
  SettingsUsersIndexRoute: SettingsUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/example/",
        "/mypage/",
        "/settings/",
        "/google/link/",
        "/google/login/",
        "/google/result/",
        "/settings/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/example/": {
      "filePath": "example/index.tsx"
    },
    "/mypage/": {
      "filePath": "mypage/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/google/link/": {
      "filePath": "google/link/index.tsx"
    },
    "/google/login/": {
      "filePath": "google/login/index.tsx"
    },
    "/google/result/": {
      "filePath": "google/result/index.tsx"
    },
    "/settings/users/": {
      "filePath": "settings/users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
